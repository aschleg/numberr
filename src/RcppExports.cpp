// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// binomial_recursive
int binomial_recursive(int n, int k);
RcppExport SEXP numberr_binomial_recursive(SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(binomial_recursive(n, k));
    return rcpp_result_gen;
END_RCPP
}
// binomial_multiplicative
int binomial_multiplicative(int n, int k);
RcppExport SEXP numberr_binomial_multiplicative(SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(binomial_multiplicative(n, k));
    return rcpp_result_gen;
END_RCPP
}
// binomial_factorial
int binomial_factorial(int n, int k);
RcppExport SEXP numberr_binomial_factorial(SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(binomial_factorial(n, k));
    return rcpp_result_gen;
END_RCPP
}
// fermat
NumericVector fermat(int n);
RcppExport SEXP numberr_fermat(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fermat(n));
    return rcpp_result_gen;
END_RCPP
}
// pollardrho
NumericVector pollardrho(int n);
RcppExport SEXP numberr_pollardrho(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(pollardrho(n));
    return rcpp_result_gen;
END_RCPP
}
// factorial
double factorial(int n);
RcppExport SEXP numberr_factorial(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(factorial(n));
    return rcpp_result_gen;
END_RCPP
}
// stirling
double stirling(int n);
RcppExport SEXP numberr_stirling(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(stirling(n));
    return rcpp_result_gen;
END_RCPP
}
// stirlingln
double stirlingln(int n);
RcppExport SEXP numberr_stirlingln(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(stirlingln(n));
    return rcpp_result_gen;
END_RCPP
}
// ramanujan
double ramanujan(int n);
RcppExport SEXP numberr_ramanujan(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(ramanujan(n));
    return rcpp_result_gen;
END_RCPP
}
// fallingfactorial
double fallingfactorial(int x, int n);
RcppExport SEXP numberr_fallingfactorial(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fallingfactorial(x, n));
    return rcpp_result_gen;
END_RCPP
}
// risingfactorial
double risingfactorial(int x, int n);
RcppExport SEXP numberr_risingfactorial(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(risingfactorial(x, n));
    return rcpp_result_gen;
END_RCPP
}
// fibonacci
NumericVector fibonacci(int n);
RcppExport SEXP numberr_fibonacci(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fibonacci(n));
    return rcpp_result_gen;
END_RCPP
}
// gcd_recursive
int gcd_recursive(int a, int b);
RcppExport SEXP numberr_gcd_recursive(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gcd_recursive(a, b));
    return rcpp_result_gen;
END_RCPP
}
// gcd_division
int gcd_division(int a, int b);
RcppExport SEXP numberr_gcd_division(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gcd_division(a, b));
    return rcpp_result_gen;
END_RCPP
}
// gcd_subtraction
int gcd_subtraction(int a, int b);
RcppExport SEXP numberr_gcd_subtraction(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gcd_subtraction(a, b));
    return rcpp_result_gen;
END_RCPP
}
// gcd_extended
NumericVector gcd_extended(int a, int b);
RcppExport SEXP numberr_gcd_extended(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(gcd_extended(a, b));
    return rcpp_result_gen;
END_RCPP
}
// iscomposite
bool iscomposite(int n);
RcppExport SEXP numberr_iscomposite(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(iscomposite(n));
    return rcpp_result_gen;
END_RCPP
}
// iscoprime
bool iscoprime(int a, int b);
RcppExport SEXP numberr_iscoprime(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(iscoprime(a, b));
    return rcpp_result_gen;
END_RCPP
}
// iseven
bool iseven(int n);
RcppExport SEXP numberr_iseven(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(iseven(n));
    return rcpp_result_gen;
END_RCPP
}
// isodd
bool isodd(int n);
RcppExport SEXP numberr_isodd(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(isodd(n));
    return rcpp_result_gen;
END_RCPP
}
// issquare
bool issquare(int n);
RcppExport SEXP numberr_issquare(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(issquare(n));
    return rcpp_result_gen;
END_RCPP
}
// isprime
bool isprime(int n);
RcppExport SEXP numberr_isprime(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(isprime(n));
    return rcpp_result_gen;
END_RCPP
}
// lucas_lehmer
bool lucas_lehmer(int n);
RcppExport SEXP numberr_lucas_lehmer(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(lucas_lehmer(n));
    return rcpp_result_gen;
END_RCPP
}
